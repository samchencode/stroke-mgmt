<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <style>
    body {
      font-family: Arial, Helvetica, sans-serif;
      background-color: #fafafa;
    }

    iframe,
    img {
      width: 100%;
    }

    .iframe__wrapper--offline {
      min-width: 100%;
      min-height: 300px;
      border: 1px dashed black;
      position: relative;
    }

    .iframe__wrapper--offline::before {
      content: 'Oops! We could not load this embedded element since there is no internet connection.';
      text-align: center;
      position: absolute;
      width: 100%;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      /* Body Large */
    }

    .iframe__wrapper--offline iframe {
      visibility: hidden;
    }
  </style>
</head>

<body>
  <%- body %>
</body>

<script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyArticleLinkPressed = notifyReactNative.bind(null, 'articlelinkpressed');
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed');
  const notifyError = notifyReactNative.bind(null, 'error');

  ; // Listen to click of any link
  (function() {
    const isArticleLink = (href) => href.slice(0, 8) === 'article:'

    function handleLinkPressed(href) {
      notifyLinkPressed({
        href
      });
    }

    function handleArticleLinkPressed(href) {
      const articleId = href.slice(8)
      notifyArticleLinkPressed({
        articleId
      });
    }

    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      const href = a.getAttribute('href')
      if (href.slice(0, 1) === '#') continue
      a.addEventListener('click', (e) => {
        e.preventDefault()
        const href = e.target.getAttribute('href')
        if (isArticleLink(href)) handleArticleLinkPressed(href)
        else handleLinkPressed(href)
      })
    }
  })();

  ; // hide iframes in case of no internet connectivity
  (function() {
    function wrapElement(el, className) {
      var wrapper = document.createElement('div')
      wrapper.className = className
      var newEl = el.cloneNode()
      wrapper.appendChild(newEl)
      el.replaceWith(wrapper)
      return wrapper
    }
    var frames = document.getElementsByTagName('iframe')
    var wrappedFrames = []
    for (var i = 0; i < frames.length; i++) {
      var wrappedFrame = wrapElement(frames[i], 'iframe__wrapper')
      wrappedFrames.push(wrappedFrame)
    }

    function OnlineState(context) {
      return {
        toOnline: function() {},
        toOffline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.add('iframe__wrapper--offline')
          }
          context.state = OfflineState(context)
        }
      }
    }

    function OfflineState(context) {
      return {
        toOnline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.remove('iframe__wrapper--offline')
          }
          context.state = OnlineState(context)
        },
        toOffline: function() {}
      }
    }

    function ConnectivityStateManager() {
      var context = {}
      context.state = window.navigator.onLine ? OnlineState(context) : OfflineState(context)

      window.addEventListener('online', function() {
        console.log('to online')
        context.state.toOnline()
      })
      window.addEventListener('offline', function() {
        console.log('to offline')
        context.state.toOffline()
      })
      return context
    }

    var stateManager = ConnectivityStateManager()
  })()

  ; // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.name,
        message: e.message,
      })
    );
  })();
</script>

</html>