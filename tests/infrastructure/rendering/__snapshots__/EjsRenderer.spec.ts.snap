// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EjsAlgorithmRenderer Behavior should render article title and html 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>hello world</title>
  <style>
    body {
      font-family: Arial, Helvetica, sans-serif;
      background-color: #fafafa;
    }

    iframe,
    img {
      width: 100%;
    }

    blockquote {
      position: relative;
      margin: 0;
      padding: 16px 32px;
    }

    blockquote::before {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      width: 4px;
      height: 100%;
      background-color: #3c7590;
    }

    table {
      border-collapse: collapse;
      border-spacing: 0px;
      border-radius: 4px;
    }

    table,
    th,
    td {
      border: 1px solid #c9cfc9;
    }

    thead {
      background-color: #dbe9f0;
    }

    tr {
      height: 56px;
    }

    thead th {
      color: #0f1d24;
    }

    td,
    th {
      padding-left: 16px;
      padding-right: 16px;
      text-align: center;
    }

    /* Responsive Page Width */

    @media screen and (min-width: 900px) {
      body {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }

      .template.header,
      .template.main {
        width: 868px;
      }
    }

    /* Wrappers */

    .table__wrapper {
      width: 100%;
      overflow-x: scroll;
    }

    .iframe__wrapper {
      min-width: 100%;
      min-height: 300px;
    }

    .iframe__wrapper--offline,
    .iframe__wrapper--loading {
      border: 1px dashed black;
      position: relative;
    }

    .iframe__wrapper::before {
      text-align: center;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      /* body-large */
      line-height: 24px;
      font-size: 16px;
      letter-spacing: 0.5px;
      font-weight: 400;
    }

    .iframe__wrapper--offline::before {
      content: 'Oops! We could not load this embedded element since there is no internet connection.';
    }

    .iframe__wrapper--loading::before {
      content: 'Loading embedded element...';
    }

    .iframe__wrapper--offline iframe,
    .iframe__wrapper--loading iframe {
      visibility: hidden;
    }

    .template.last-updated {
      display: block;
      align-self: flex-end;
      margin-right: 16px;
      text-align: right;
    }
  </style>
</head>

<body>
  <main class="template main"><h1>foo bar</h1></main>
  <i class="template last-updated">Last Updated: December 31, 1969</i>
</body>

<script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyArticleLinkPressed = notifyReactNative.bind(null, 'articlelinkpressed');
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed');
  const notifyError = notifyReactNative.bind(null, 'error');

  ; // Listen to click of any link
  (function() {
    const isArticleLink = (href) => href.slice(0, 8) === 'article:'

    function handleLinkPressed(href) {
      notifyLinkPressed({
        href
      });
    }

    function handleArticleLinkPressed(href) {
      const articleId = href.slice(8)
      notifyArticleLinkPressed({
        articleId
      });
    }

    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      const href = a.getAttribute('href')
      if (href.slice(0, 1) === '#') continue
      a.addEventListener('click', (e) => {
        e.preventDefault()
        const href = e.target.getAttribute('href')
        if (isArticleLink(href)) handleArticleLinkPressed(href)
        else handleLinkPressed(href)
      })
    }
  })();

  ; // hide iframes in case of no internet connectivity
  (function() {
    function wrapElement(el, className) {
      var wrapper = document.createElement('div')
      wrapper.className = className
      var newEl = el.cloneNode()
      wrapper.appendChild(newEl)
      el.replaceWith(wrapper)
      return wrapper
    }
    var frames = document.getElementsByTagName('iframe')
    var wrappedFrames = []
    for (var i = 0; i < frames.length; i++) {
      var wrappedFrame = wrapElement(frames[i], 'iframe__wrapper iframe__wrapper--loading')
      frames[i].addEventListener('load', function() {
        wrappedFrame.classList.remove('iframe__wrapper--loading')
      })
      wrappedFrames.push(wrappedFrame)
    }

    function OnlineState(context) {
      return {
        toOnline: function() {},
        toOffline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.add('iframe__wrapper--offline')
          }
          context.state = OfflineState(context)
        }
      }
    }

    function OfflineState(context) {
      return {
        toOnline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.remove('iframe__wrapper--offline')
          }
          context.state = OnlineState(context)
        },
        toOffline: function() {}
      }
    }

    function ConnectivityStateManager() {
      var context = {}
      context.state = window.navigator.onLine ? OnlineState(context) : OfflineState(context)

      window.addEventListener('online', function() {
        context.state.toOnline()
      })
      window.addEventListener('offline', function() {
        context.state.toOffline()
      })
      return context
    }

    var stateManager = ConnectivityStateManager()
  })()

  ; // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.name,
        message: e.message,
      })
    );
  })();

  ; // Wrap tables with wrapper div
  (function() {
    const tables = Array.from(document.getElementsByTagName('table'))
    tables.forEach(table => {
      const wrapper = document.createElement('div')
      wrapper.className = 'table__wrapper'
      const newTable = table.cloneNode(true)
      wrapper.appendChild(newTable)
      table.replaceWith(wrapper)
    })
  })()
</script>

</html>"
`;

exports[`EjsAlgorithmRenderer Behavior should render disclaimer html 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>hello world</title>
  <style>
    body {
      background-color: #fafafa;
      font-family: Arial, Helvetica, sans-serif;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
    }

    h1 {
      margin-bottom: 16px;
    }

    p {
      text-align: left;
    }

    iframe,
    img {
      width: 100%;
    }

    .iframe__wrapper {
      min-width: 100%;
      min-height: 300px;
    }

    .iframe__wrapper--offline,
    .iframe__wrapper--loading {
      border: 1px dashed black;
      position: relative;
    }

    .iframe__wrapper::before {
      text-align: center;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      /* body-large */
      line-height: 24px;
      font-size: 16px;
      letter-spacing: 0.5px;
      font-weight: 400;
    }

    .iframe__wrapper--offline::before {
      content: 'Oops! We could not load this embedded element since there is no internet connection.';
    }

    .iframe__wrapper--loading::before {
      content: 'Loading embedded element...';
    }

    .iframe__wrapper--offline iframe,
    .iframe__wrapper--loading iframe {
      visibility: hidden;
    }
  </style>
</head>

<body>
  <h1>foo bar</h1>

  <script>
    function notifyReactNative(messageType, content) {
      const message = {
        type: messageType,
        content,
      };
      window.ReactNativeWebView.postMessage(JSON.stringify(message));
    }
    const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed')
    const notifyError = notifyReactNative.bind(null, 'error');
    const notifyLayout = notifyReactNative.bind(null, 'layout');

    ; // Send window size upon load of the window
    (function() {
      window.addEventListener('load', () => notifyLayout({
        width: document.body.offsetWidth,
        height: document.body.offsetHeight,
      }));
    })();

    ; // Listen to click of any link
    (function() {
      const links = Array.from(document.querySelectorAll('a[href]'))
      for (const a of links) {
        a.addEventListener('click', (e) => {
          e.preventDefault()
          const href = e.target.getAttribute('href')
          notifyLinkPressed({
            href
          })
        })
      }
    })();

    ; // hide iframes in case of no internet connectivity
    (function() {
      function wrapElement(el, className) {
        var wrapper = document.createElement('div')
        wrapper.className = className
        var newEl = el.cloneNode()
        wrapper.appendChild(newEl)
        el.replaceWith(wrapper)
        return wrapper
      }
      var frames = document.getElementsByTagName('iframe')
      var wrappedFrames = []
      for (var i = 0; i < frames.length; i++) {
        var wrappedFrame = wrapElement(frames[i], 'iframe__wrapper iframe__wrapper--loading')
        frames[i].addEventListener('load', function() {
          wrappedFrame.classList.remove('iframe__wrapper--loading')
        })
        wrappedFrames.push(wrappedFrame)
      }

      function OnlineState(context) {
        return {
          toOnline: function() {},
          toOffline: function() {
            for (var i = 0; i < wrappedFrames.length; i++) {
              var wrappedFrame = wrappedFrames[i]
              wrappedFrame.classList.add('iframe__wrapper--offline')
            }
            context.state = OfflineState(context)
          }
        }
      }

      function OfflineState(context) {
        return {
          toOnline: function() {
            for (var i = 0; i < wrappedFrames.length; i++) {
              var wrappedFrame = wrappedFrames[i]
              wrappedFrame.classList.remove('iframe__wrapper--offline')
            }
            context.state = OnlineState(context)
          },
          toOffline: function() {}
        }
      }

      function ConnectivityStateManager() {
        var context = {}
        context.state = window.navigator.onLine ? OnlineState(context) : OfflineState(context)

        window.addEventListener('online', function() {
          context.state.toOnline()
        })
        window.addEventListener('offline', function() {
          context.state.toOffline()
        })
        return context
      }

      var stateManager = ConnectivityStateManager()
    })()

    ; // Report errors
    (function() {
      window.addEventListener('error', (e) =>
        notifyError({
          name: e.name,
          message: e.message,
        })
      );
    })();
  </script>
</body>

</html>"
`;

exports[`EjsAlgorithmRenderer Behavior should render scored algorithm 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <style>
  body {
    margin: 0 16px;
    padding: 0;
    font-family: Arial, Helvetica, sans-serif;
    background-color: #fafafa;
  }

  iframe,
  img {
    width: 100%;
  }

  blockquote {
    position: relative;
    margin: 0;
    padding: 16px 32px;
  }

  blockquote::before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background-color: #3c7590;
  }

  table {
    border-collapse: collapse;
    border-spacing: 0px;
    border-radius: 4px;
  }

  table,
  th,
  td {
    border: 1px solid #c9cfc9;
  }

  thead {
    background-color: #dbe9f0;
  }

  tr {
    height: 56px;
  }

  thead th {
    color: #0f1d24;
  }

  td,
  th {
    padding-left: 16px;
    padding-right: 16px;
    text-align: center;
  }

  /* Responsive Page Width */

  @media screen and (min-width: 900px) {
    body {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .template.header,
    .template.main {
      width: 868px;
    }
  }

  /* Wrapper */

  .table__wrapper {
    width: 100%;
    overflow-x: scroll;
  }

  /* Template */

  .template {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  .template.switches__list,
  .template.outcomes__list {
    list-style: none;
    padding: 0;
  }

  .template.header__title {
    margin: 0;
    padding-top: 16px;
    /* headline-medium */
    line-height: 36px;
    font-size: 28px;
    font-weight: 400;
  }

  .template.body__paragraph {
    margin-top: 16px;
    /* body-large */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.5px;
    font-weight: 400;
  }

  .template.switches__list {
    margin-top: 16px;
  }

  .template.switches__list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 8px;
    user-select: none;
    position: relative;
  }

  .template.switches__list-item:first-child {
    padding-top: 0;
  }

  .template.switches__tooltip {
    display: none;
    position: absolute;
    top: 100%;
    background-color: #111111;
    color: #eeeeee;
    padding: 4px;
    border-radius: 4px;
    z-index: 999;
    /* body-small */
    line-height: 16px;
    font-size: 12px;
    letter-spacing: 0.4px;
    font-weight: 400;
  }

  .template.switches__group-label--has-description::after {
    content: 'ⓘ';
    display: inline-block;
    margin-left: 4px;
  }

  .template.switches__tooltip-select {
    height: 0px;
    width: 0px;
    visibility: transparent;
  }

  .template.switches__tooltip-select:checked+.template.switches__tooltip {
    display: block;
  }

  .template.switches__input {
    height: 0px;
    width: 0px;
    visibility: hidden;
  }

  .template.switches__group-label,
  .template.switches__radio-label {
    /* body-large */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.5px;
    font-weight: 400;
  }

  .template.switches__radiogroup {
    display: flex;
    flex-direction: row;
    border-radius: 999px;
    border: 1px solid #478e3e;
    overflow: hidden;
  }

  .template.switches__level {
    flex: 1;
    padding: 8px;
  }

  .template.switches__level:first-child {
    padding-left: 16px;
  }

  .template.switches__level:last-child {
    padding-right: 16px;
  }

  .template.switches__level--checked {
    background-color: #478e3e;
    color: white;
  }

  .template.switches__radio-label {
    display: inline-block;
    width: 2em;
    text-align: center;
  }

  .template.outcomes__list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .template.outcomes__headline {
    margin: 0;
    margin-top: 16px;
    text-align: right;
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1;
    font-weight: 500;
  }

  .template.outcomes__list-item {
    margin-top: 8px;
  }

  .template.outcomes__title {
    /* title-medium */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.15px;
    font-weight: 500;
  }

  .template.outcomes__item {
    padding: 16px;
    border: 1px solid #3c7590;
    border-radius: 20px;
    background-color: #3c7590;
  }

  .template.outcomes__item>summary {
    list-style: none;
  }

  .template.outcomes__item[open] {
    background-color: #dbe9f0;
  }

  .template.outcomes__item .template.outcomes__title {
    color: white;
  }

  .template.outcomes__item[open] .template.outcomes__title {
    color: #3c7590;
  }

  .template.outcomes__item--empty {
    background-color: inherit;
    border-style: dashed;
  }

  .template.outcomes__body {
    margin-top: 16px;
  }

  .template.outcomes__button {
    background-color: #478e3e;
    color: white;
    border-radius: 999px;
    border: 1px solid #478e3e;
    height: 40px;
    padding: 0 24px;
    margin-top: 16px;
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1px;
    font-weight: 500;
  }

  .iframe__wrapper {
    min-width: 100%;
    min-height: 300px;
  }

  .iframe__wrapper--offline,
  .iframe__wrapper--loading {
    border: 1px dashed black;
    position: relative;
  }

  .iframe__wrapper::before {
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* body-large */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.5px;
    font-weight: 400;
  }

  .iframe__wrapper--offline::before {
    content: 'Oops! We could not load this embedded element since there is no internet connection.';
  }

  .iframe__wrapper--loading::before {
    content: 'Loading embedded element...';
  }

  .iframe__wrapper--offline iframe,
  .iframe__wrapper--loading iframe {
    visibility: hidden;
  }

  .template.last-updated {
    display: block;
    align-self: flex-end;
    margin-right: 16px;
    margin-top: 16px;
    text-align: right;
  }
</style>
</head>

<body>
  <header class="template header">
    <h1 class="template header__title">GWNS</h1>
  </header>
  <main class="template main">
    <p class="template body__paragraph">
      All need immediate Rx and activate brain attack team immediately. ABCT = (airway, breathing, circulation, time of stroke onset). Endotracheal intubation if compromised airway or GCS less than eight. Maintain SBP 140 to 180 mmHg. HR 60-100. Establish IV access and hydration is recommended based on height/weight and clinical scenarios
    </p>
    <ul class="template switches__list">
      
      <li class="template switches__list-item">
        <label for="switches__tooltip-select--0" class="template switches__group-label ">
          Gaze Deviation
        </label>
        
        <div class="template switches__radiogroup">
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--yes" name="switch-0" id="switch-0-yes" type="radio"  data-switch-id="0" data-level-id="yes">
            <label class="template switches__radio-label switches__radio-label--yes" for="switch-0-yes">
              Yes
            </label>
          </div>
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--no" name="switch-0" id="switch-0-no" type="radio"  data-switch-id="0" data-level-id="no">
            <label class="template switches__radio-label switches__radio-label--no" for="switch-0-no">
              No
            </label>
          </div>
          
        </div>
      </li>
      
      <li class="template switches__list-item">
        <label for="switches__tooltip-select--1" class="template switches__group-label ">
          Weakness
        </label>
        
        <div class="template switches__radiogroup">
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--yes" name="switch-1" id="switch-1-yes" type="radio"  data-switch-id="1" data-level-id="yes">
            <label class="template switches__radio-label switches__radio-label--yes" for="switch-1-yes">
              Yes
            </label>
          </div>
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--no" name="switch-1" id="switch-1-no" type="radio"  data-switch-id="1" data-level-id="no">
            <label class="template switches__radio-label switches__radio-label--no" for="switch-1-no">
              No
            </label>
          </div>
          
        </div>
      </li>
      
      <li class="template switches__list-item">
        <label for="switches__tooltip-select--2" class="template switches__group-label ">
          Neglect/Disregard/Extinction
        </label>
        
        <div class="template switches__radiogroup">
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--yes" name="switch-2" id="switch-2-yes" type="radio"  data-switch-id="2" data-level-id="yes">
            <label class="template switches__radio-label switches__radio-label--yes" for="switch-2-yes">
              Yes
            </label>
          </div>
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--no" name="switch-2" id="switch-2-no" type="radio"  data-switch-id="2" data-level-id="no">
            <label class="template switches__radio-label switches__radio-label--no" for="switch-2-no">
              No
            </label>
          </div>
          
        </div>
      </li>
      
      <li class="template switches__list-item">
        <label for="switches__tooltip-select--3" class="template switches__group-label ">
          Speech impairment
        </label>
        
        <div class="template switches__radiogroup">
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--yes" name="switch-3" id="switch-3-yes" type="radio"  data-switch-id="3" data-level-id="yes">
            <label class="template switches__radio-label switches__radio-label--yes" for="switch-3-yes">
              Yes
            </label>
          </div>
          
          <div class="template switches__level ">
            <input class="template switches__input switches__input--no" name="switch-3" id="switch-3-no" type="radio"  data-switch-id="3" data-level-id="no">
            <label class="template switches__radio-label switches__radio-label--no" for="switch-3-no">
              No
            </label>
          </div>
          
        </div>
      </li>
      
    </ul>
    <ul class="template outcomes__list">
  <h1 class="template outcomes__headline">Results</h1>
  
  <li class="template outcomes__list-item">
  <div class="template outcomes__item--empty outcomes__item">
    Results will appear here when all fields of the algorithm have been filled.
  </div>
</li>
  
</ul>
  </main>
  <i class="template last-updated">Last Updated: December 31, 1969</i>
  <script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyLayout = notifyReactNative.bind(null, 'layout');
  const notifySwitchChanged = notifyReactNative.bind(null, 'switchchanged');
  const notifyError = notifyReactNative.bind(null, 'error');
  const notifyNextPressed = notifyReactNative.bind(null, 'nextpressed');
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed');
  const notifyArticleLinkPressed = notifyReactNative.bind(null, 'articlelinkpressed');
  const notifyLog = function(msg) {
    notifyReactNative('log', {
      message: msg
    })
  }

  ; // Report window height
  (function() {
    const notify = () => notifyLayout({
      width: document.body.offsetWidth,
      height: document.body.offsetHeight,
    });

    // Watch for opening of outcome dropdowns
    const bodyEl = document.querySelector('body')
    const observerCb = (mutationList) => {
      mutationList.forEach(mut => {
        if (mut.type !== 'attributes') return;
        if (mut.attributeName === 'open') notify();
      })
    }
    const observer = new MutationObserver(observerCb)
    observer.observe(bodyEl, {
      attributes: true,
      childList: true,
      subtree: true
    })

    // Wait for any images to finish loading
    window.addEventListener('load', notify)
    notify()
  })();

  ; // Listen to changes in switch values
  (function() {
    const inputs = Array.from(document.querySelectorAll('.template.switches__input'));
    for (const input of inputs) {
      input.addEventListener('change', ({
        target
      }) => {
        const id = target.dataset.switchId;
        const levelId = target.dataset.levelId;

        notifySwitchChanged({
          id,
          levelId,
        });
      });
    }
  })();

  ; // Listen to click of next algorithm button
  (function() {
    const buttons = Array.from(document.querySelectorAll('.template.outcomes__button'));
    for (const button of buttons) {
      button.addEventListener('click', ({
        target
      }) => {
        const id = target.getAttribute('data-next-id');
        notifyNextPressed({
          id
        });
      });
    }
  })();

  ; // Wrap tables with wrapper div
  (function() {
    const tables = Array.from(document.getElementsByTagName('table'))
    tables.forEach(table => {
      const wrapper = document.createElement('div')
      wrapper.className = 'table__wrapper'
      const newTable = table.cloneNode(true)
      wrapper.appendChild(newTable)
      table.replaceWith(wrapper)
    })
  })()

  ; // Listen to click of any link
  (function() {
    const isArticleLink = (href) => href.slice(0, 8) === 'article:'

    function handleLinkPressed(href) {
      notifyLinkPressed({
        href
      });
    }

    function handleArticleLinkPressed(href) {
      const articleId = href.slice(8)
      notifyArticleLinkPressed({
        articleId
      });
    }

    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      const href = a.getAttribute('href')
      if (href.slice(0, 1) === '#') continue
      a.addEventListener('click', function(e) {
        e.preventDefault()
        const href = this.getAttribute('href')
        if (isArticleLink(href)) handleArticleLinkPressed(href)
        else handleLinkPressed(href)
      })
    }
  })();

  ; // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.error.name,
        message: e.message,
      })
    );
  })();

  ; // Clear tooltip on click out
  (function() {
    const ignoreList = document.querySelectorAll('.template.switches__tooltip, .template.switches__group-label, .template.switches__tooltip-select')
    const selects = document.querySelectorAll('.template.switches__tooltip-select')

    document.body.addEventListener('click', (e) => {
      for (const el of selects) {
        el.checked = false
      }
    })
    Array.from(ignoreList).forEach(el => {
      el.addEventListener('click', (e) => e.stopPropagation())
    })
  })()

  ; // hide iframes in case of no internet connectivity
  (function() {
    function wrapElement(el, className) {
      var wrapper = document.createElement('div')
      wrapper.className = className
      var newEl = el.cloneNode()
      wrapper.appendChild(newEl)
      el.replaceWith(wrapper)
      return wrapper
    }
    var frames = document.getElementsByTagName('iframe')
    var wrappedFrames = []
    for (var i = 0; i < frames.length; i++) {
      var wrappedFrame = wrapElement(frames[i], 'iframe__wrapper iframe__wrapper--loading')
      frames[i].addEventListener('load', function() {
        wrappedFrame.classList.remove('iframe__wrapper--loading')
      })
      wrappedFrames.push(wrappedFrame)
    }

    function OnlineState(context) {
      return {
        toOnline: function() {},
        toOffline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.add('iframe__wrapper--offline')
          }
          context.state = OfflineState(context)
        }
      }
    }

    function OfflineState(context) {
      return {
        toOnline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.remove('iframe__wrapper--offline')
          }
          context.state = OnlineState(context)
        },
        toOffline: function() {}
      }
    }

    function ConnectivityStateManager() {
      var context = {}
      context.state = window.navigator.onLine ? OnlineState(context) : OfflineState(context)

      window.addEventListener('online', function() {
        context.state.toOnline()
      })
      window.addEventListener('offline', function() {
        context.state.toOffline()
      })
      return context
    }

    var stateManager = ConnectivityStateManager()
  })()
</script>
</body>

</html>"
`;

exports[`EjsAlgorithmRenderer Behavior should render text algorithm 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <style>
  body {
    margin: 0 16px;
    padding: 0;
    font-family: Arial, Helvetica, sans-serif;
    background-color: #fafafa;
  }

  iframe,
  img {
    width: 100%;
  }

  blockquote {
    position: relative;
    margin: 0;
    padding: 16px 32px;
  }

  blockquote::before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background-color: #3c7590;
  }

  table {
    border-collapse: collapse;
    border-spacing: 0px;
    border-radius: 4px;
  }

  table,
  th,
  td {
    border: 1px solid #c9cfc9;
  }

  thead {
    background-color: #dbe9f0;
  }

  tr {
    height: 56px;
  }

  thead th {
    color: #0f1d24;
  }

  td,
  th {
    padding-left: 16px;
    padding-right: 16px;
    text-align: center;
  }

  /* Responsive Page Width */

  @media screen and (min-width: 900px) {
    body {
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }

    .template.header,
    .template.main {
      width: 868px;
    }
  }

  /* Wrapper */

  .table__wrapper {
    width: 100%;
    overflow-x: scroll;
  }

  /* Template */

  .template {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  .template.switches__list,
  .template.outcomes__list {
    list-style: none;
    padding: 0;
  }

  .template.header__title {
    margin: 0;
    padding-top: 16px;
    /* headline-medium */
    line-height: 36px;
    font-size: 28px;
    font-weight: 400;
  }

  .template.body__paragraph {
    margin-top: 16px;
    /* body-large */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.5px;
    font-weight: 400;
  }

  .template.switches__list {
    margin-top: 16px;
  }

  .template.switches__list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 8px;
    user-select: none;
    position: relative;
  }

  .template.switches__list-item:first-child {
    padding-top: 0;
  }

  .template.switches__tooltip {
    display: none;
    position: absolute;
    top: 100%;
    background-color: #111111;
    color: #eeeeee;
    padding: 4px;
    border-radius: 4px;
    z-index: 999;
    /* body-small */
    line-height: 16px;
    font-size: 12px;
    letter-spacing: 0.4px;
    font-weight: 400;
  }

  .template.switches__group-label--has-description::after {
    content: 'ⓘ';
    display: inline-block;
    margin-left: 4px;
  }

  .template.switches__tooltip-select {
    height: 0px;
    width: 0px;
    visibility: transparent;
  }

  .template.switches__tooltip-select:checked+.template.switches__tooltip {
    display: block;
  }

  .template.switches__input {
    height: 0px;
    width: 0px;
    visibility: hidden;
  }

  .template.switches__group-label,
  .template.switches__radio-label {
    /* body-large */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.5px;
    font-weight: 400;
  }

  .template.switches__radiogroup {
    display: flex;
    flex-direction: row;
    border-radius: 999px;
    border: 1px solid #478e3e;
    overflow: hidden;
  }

  .template.switches__level {
    flex: 1;
    padding: 8px;
  }

  .template.switches__level:first-child {
    padding-left: 16px;
  }

  .template.switches__level:last-child {
    padding-right: 16px;
  }

  .template.switches__level--checked {
    background-color: #478e3e;
    color: white;
  }

  .template.switches__radio-label {
    display: inline-block;
    width: 2em;
    text-align: center;
  }

  .template.outcomes__list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .template.outcomes__headline {
    margin: 0;
    margin-top: 16px;
    text-align: right;
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1;
    font-weight: 500;
  }

  .template.outcomes__list-item {
    margin-top: 8px;
  }

  .template.outcomes__title {
    /* title-medium */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.15px;
    font-weight: 500;
  }

  .template.outcomes__item {
    padding: 16px;
    border: 1px solid #3c7590;
    border-radius: 20px;
    background-color: #3c7590;
  }

  .template.outcomes__item>summary {
    list-style: none;
  }

  .template.outcomes__item[open] {
    background-color: #dbe9f0;
  }

  .template.outcomes__item .template.outcomes__title {
    color: white;
  }

  .template.outcomes__item[open] .template.outcomes__title {
    color: #3c7590;
  }

  .template.outcomes__item--empty {
    background-color: inherit;
    border-style: dashed;
  }

  .template.outcomes__body {
    margin-top: 16px;
  }

  .template.outcomes__button {
    background-color: #478e3e;
    color: white;
    border-radius: 999px;
    border: 1px solid #478e3e;
    height: 40px;
    padding: 0 24px;
    margin-top: 16px;
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1px;
    font-weight: 500;
  }

  .iframe__wrapper {
    min-width: 100%;
    min-height: 300px;
  }

  .iframe__wrapper--offline,
  .iframe__wrapper--loading {
    border: 1px dashed black;
    position: relative;
  }

  .iframe__wrapper::before {
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* body-large */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.5px;
    font-weight: 400;
  }

  .iframe__wrapper--offline::before {
    content: 'Oops! We could not load this embedded element since there is no internet connection.';
  }

  .iframe__wrapper--loading::before {
    content: 'Loading embedded element...';
  }

  .iframe__wrapper--offline iframe,
  .iframe__wrapper--loading iframe {
    visibility: hidden;
  }

  .template.last-updated {
    display: block;
    align-self: flex-end;
    margin-right: 16px;
    margin-top: 16px;
    text-align: right;
  }
</style>
</head>

<body>
  <header class="template header">
    <h1 class="template header__title">ABCTs</h1>
  </header>
  <main class="template main">
    <p class="template body__paragraph">
      <img src="https://placeimg.com/640/480/any" height="100"><ul><li>airway</li><li>breathing</li><li>circulation</li><li>time of stroke onset</li><a href="google.com">google</a></ul>
    </p>
    <ul class="template outcomes__list">
  <h1 class="template outcomes__headline">Results</h1>
  
  
  <li class="template outcomes__list-item">
    <details class="template outcomes__item" >
      <summary><span class="template outcomes__title">Stable<span></summary>
      <div class="template outcomes__body">Proceed to GWNS algorithm</div>
      
      <button class="template outcomes__button" data-next-id="1">
        Continue
      </button>
      
    </details>
  </li>
  
  <li class="template outcomes__list-item">
    <details class="template outcomes__item" >
      <summary><span class="template outcomes__title">Not Stable<span></summary>
      <div class="template outcomes__body">Stabilize ABCTs before continuing!</div>
      
    </details>
  </li>
  
  
</ul>
  </main>
  <i class="template last-updated">Last Updated: December 31, 1969</i>
  <script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyLayout = notifyReactNative.bind(null, 'layout');
  const notifySwitchChanged = notifyReactNative.bind(null, 'switchchanged');
  const notifyError = notifyReactNative.bind(null, 'error');
  const notifyNextPressed = notifyReactNative.bind(null, 'nextpressed');
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed');
  const notifyArticleLinkPressed = notifyReactNative.bind(null, 'articlelinkpressed');
  const notifyLog = function(msg) {
    notifyReactNative('log', {
      message: msg
    })
  }

  ; // Report window height
  (function() {
    const notify = () => notifyLayout({
      width: document.body.offsetWidth,
      height: document.body.offsetHeight,
    });

    // Watch for opening of outcome dropdowns
    const bodyEl = document.querySelector('body')
    const observerCb = (mutationList) => {
      mutationList.forEach(mut => {
        if (mut.type !== 'attributes') return;
        if (mut.attributeName === 'open') notify();
      })
    }
    const observer = new MutationObserver(observerCb)
    observer.observe(bodyEl, {
      attributes: true,
      childList: true,
      subtree: true
    })

    // Wait for any images to finish loading
    window.addEventListener('load', notify)
    notify()
  })();

  ; // Listen to changes in switch values
  (function() {
    const inputs = Array.from(document.querySelectorAll('.template.switches__input'));
    for (const input of inputs) {
      input.addEventListener('change', ({
        target
      }) => {
        const id = target.dataset.switchId;
        const levelId = target.dataset.levelId;

        notifySwitchChanged({
          id,
          levelId,
        });
      });
    }
  })();

  ; // Listen to click of next algorithm button
  (function() {
    const buttons = Array.from(document.querySelectorAll('.template.outcomes__button'));
    for (const button of buttons) {
      button.addEventListener('click', ({
        target
      }) => {
        const id = target.getAttribute('data-next-id');
        notifyNextPressed({
          id
        });
      });
    }
  })();

  ; // Wrap tables with wrapper div
  (function() {
    const tables = Array.from(document.getElementsByTagName('table'))
    tables.forEach(table => {
      const wrapper = document.createElement('div')
      wrapper.className = 'table__wrapper'
      const newTable = table.cloneNode(true)
      wrapper.appendChild(newTable)
      table.replaceWith(wrapper)
    })
  })()

  ; // Listen to click of any link
  (function() {
    const isArticleLink = (href) => href.slice(0, 8) === 'article:'

    function handleLinkPressed(href) {
      notifyLinkPressed({
        href
      });
    }

    function handleArticleLinkPressed(href) {
      const articleId = href.slice(8)
      notifyArticleLinkPressed({
        articleId
      });
    }

    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      const href = a.getAttribute('href')
      if (href.slice(0, 1) === '#') continue
      a.addEventListener('click', function(e) {
        e.preventDefault()
        const href = this.getAttribute('href')
        if (isArticleLink(href)) handleArticleLinkPressed(href)
        else handleLinkPressed(href)
      })
    }
  })();

  ; // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.error.name,
        message: e.message,
      })
    );
  })();

  ; // Clear tooltip on click out
  (function() {
    const ignoreList = document.querySelectorAll('.template.switches__tooltip, .template.switches__group-label, .template.switches__tooltip-select')
    const selects = document.querySelectorAll('.template.switches__tooltip-select')

    document.body.addEventListener('click', (e) => {
      for (const el of selects) {
        el.checked = false
      }
    })
    Array.from(ignoreList).forEach(el => {
      el.addEventListener('click', (e) => e.stopPropagation())
    })
  })()

  ; // hide iframes in case of no internet connectivity
  (function() {
    function wrapElement(el, className) {
      var wrapper = document.createElement('div')
      wrapper.className = className
      var newEl = el.cloneNode()
      wrapper.appendChild(newEl)
      el.replaceWith(wrapper)
      return wrapper
    }
    var frames = document.getElementsByTagName('iframe')
    var wrappedFrames = []
    for (var i = 0; i < frames.length; i++) {
      var wrappedFrame = wrapElement(frames[i], 'iframe__wrapper iframe__wrapper--loading')
      frames[i].addEventListener('load', function() {
        wrappedFrame.classList.remove('iframe__wrapper--loading')
      })
      wrappedFrames.push(wrappedFrame)
    }

    function OnlineState(context) {
      return {
        toOnline: function() {},
        toOffline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.add('iframe__wrapper--offline')
          }
          context.state = OfflineState(context)
        }
      }
    }

    function OfflineState(context) {
      return {
        toOnline: function() {
          for (var i = 0; i < wrappedFrames.length; i++) {
            var wrappedFrame = wrappedFrames[i]
            wrappedFrame.classList.remove('iframe__wrapper--offline')
          }
          context.state = OnlineState(context)
        },
        toOffline: function() {}
      }
    }

    function ConnectivityStateManager() {
      var context = {}
      context.state = window.navigator.onLine ? OnlineState(context) : OfflineState(context)

      window.addEventListener('online', function() {
        context.state.toOnline()
      })
      window.addEventListener('offline', function() {
        context.state.toOffline()
      })
      return context
    }

    var stateManager = ConnectivityStateManager()
  })()
</script>
</body>

</html>"
`;
