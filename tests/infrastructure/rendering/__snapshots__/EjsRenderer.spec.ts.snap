// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EjsAlgorithmRenderer Behavior should render article title and html 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>hello world</title>
  <style>
    * {
      font-family: Arial, Helvetica, sans-serif;
    }
  </style>
</head>

<body>
  <h1>foo bar</h1>
</body>

<script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed')
  const notifyError = notifyReactNative.bind(null, 'error');

  ; // Listen to click of any link
  (function() {
    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      a.addEventListener('click', (e) => {
        e.preventDefault()
        const href = e.target.getAttribute('href')
        notifyLinkPressed({
          href
        })
      })
    }
  })();

  ; // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.name,
        message: e.message,
      })
    );
  })();
</script>

</html>"
`;

exports[`EjsAlgorithmRenderer Behavior should render disclaimer html 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>hello world</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
    }

    h1 {
      margin-bottom: 16px;
    }

    p {
      text-align: left;
    }
  </style>
</head>

<body>
  <h1>foo bar</h1>

  <script>
    function notifyReactNative(messageType, content) {
      const message = {
        type: messageType,
        content,
      };
      window.ReactNativeWebView.postMessage(JSON.stringify(message));
    }
    const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed')
    const notifyError = notifyReactNative.bind(null, 'error');
    const notifyLayout = notifyReactNative.bind(null, 'layout');

    ; // Send window size upon load of the window
    (function() {
      window.onload = () => notifyLayout({
        width: document.body.offsetWidth,
        height: document.body.offsetHeight,
      });
    })();

    ; // Listen to click of any link
    (function() {
      const links = Array.from(document.querySelectorAll('a[href]'))
      for (const a of links) {
        a.addEventListener('click', (e) => {
          e.preventDefault()
          const href = e.target.getAttribute('href')
          notifyLinkPressed({
            href
          })
        })
      }
    })();

    ; // Report errors
    (function() {
      window.addEventListener('error', (e) =>
        notifyError({
          name: e.name,
          message: e.message,
        })
      );
    })();
  </script>
</body>

</html>"
`;

exports[`EjsAlgorithmRenderer Behavior should render scored algorithm 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
  body {
    margin: 0 16px;
    padding: 0;
  }

  .template {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  .template.switches__list,
  .template.outcomes__list {
    list-style: none;
    padding: 0;
  }

  .template.header__title {
    margin: 0;
    /* headline-medium */
    line-height: 36px;
    font-size: 28px;
    font-weight: 400;
  }

  .template.body__paragraph {
    margin-top: 16px;
    /* body-medium */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.25px;
    font-weight: 400;
  }

  .template.switches__list {
    margin-top: 16px;
  }

  .template.switches__list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 8px;
    user-select: none;
  }

  .template.switches__list-item:first-child {
    padding-top: 0;
  }

  .template.switches__input {
    height: 0px;
    width: 0px;
    visibility: hidden;
  }

  .template.switches__group-label,
  .template.switches__radio-label {
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1px;
    font-weight: 500;
  }

  .template.switches__radiogroup {
    position: relative;
    padding: 4px 8px 4px 8px;
    border-radius: 999px;
    border: 1px solid black;
    overflow: hidden;
  }

  .template.switches__radio-label {
    display: inline-block;
    width: 2em;
    text-align: center;
  }

  .template.switches__radiogroup-bg {
    background-color: black;
    position: absolute;
    top: 0;
    width: 50%;
    height: 100%;
    z-index: -1;
    display: none;
  }

  .template.switches__input:checked+.template.switches__radio-label {
    color: white;
  }

  .template.switches__input--yes:checked~.template.switches__radiogroup-bg {
    display: block;
    left: 0;
  }

  .template.switches__input--no:checked~.template.switches__radiogroup-bg {
    display: block;
    right: 0;
  }

  .template.outcomes__list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .template.outcomes__headline {
    margin: 0;
    margin-top: 16px;
    /* headline-small */
    line-height: 32px;
    font-size: 24px;
    font-weight: 400;
  }

  .template.outcomes__list-item {
    margin-top: 8px;
  }

  .template.outcomes__title {
    /* title-medium */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.15px;
    font-weight: 500;
  }

  .template.outcomes__item {
    padding: 16px;
    border: 1px solid black;
    border-radius: 20px;
    background-color: black;
  }

  .template.outcomes__item>summary {
    list-style: none;
  }

  .template.outcomes__item[open] {
    background-color: white;
  }

  .template.outcomes__item .template.outcomes__title {
    color: white;
  }

  .template.outcomes__item[open] .template.outcomes__title {
    color: black;
  }

  .template.outcomes__item--empty {
    background-color: inherit;
    border-style: dashed;
  }

  .template.outcomes__body {
    margin-top: 16px;
  }

  .template.outcomes__button {
    background-color: black;
    color: white;
    border-radius: 999px;
    height: 40px;
    padding: 0 24px;
    margin-top: 16px;
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1px;
    font-weight: 500;
  }
</style>
</head>

<body>
  <header>
    <h1 class="template header__title">GWNS</h1>
  </header>
  <main>
    <p class="template body__paragraph">
      All need immediate Rx and activate brain attack team immediately. ABCT = (airway, breathing, circulation, time of stroke onset). Endotracheal intubation if compromised airway or GCS less than eight. Maintain SBP 140 to 180 mmHg. HR 60-100. Establish IV access and hydration is recommended based on height/weight and clinical scenarios
    </p>
    <ul class="template switches__list">
      
      <li class="template switches__list-item">
        <span class="template switches__group-label">Gaze Deviation</span>
        <div class="template switches__radiogroup">
          <input class="template switches__input switches__input--yes" name="switch-0" id="switch-0-yes" type="radio" >
          <label class="template switches__radio-label switches__radio-label--yes" for="switch-0-yes">Yes</label>
          <input class="template switches__input switches__input--no" name="switch-0" id="switch-0-no" type="radio" >
          <label class="template switches__radio-label switches__radio-label--no" for="switch-0-no">No</label>
          <div class="template switches__radiogroup-bg"></div>
        </div>
      </li>
      
      <li class="template switches__list-item">
        <span class="template switches__group-label">Weakness</span>
        <div class="template switches__radiogroup">
          <input class="template switches__input switches__input--yes" name="switch-1" id="switch-1-yes" type="radio" >
          <label class="template switches__radio-label switches__radio-label--yes" for="switch-1-yes">Yes</label>
          <input class="template switches__input switches__input--no" name="switch-1" id="switch-1-no" type="radio" >
          <label class="template switches__radio-label switches__radio-label--no" for="switch-1-no">No</label>
          <div class="template switches__radiogroup-bg"></div>
        </div>
      </li>
      
      <li class="template switches__list-item">
        <span class="template switches__group-label">Neglect/Disregard/Extinction</span>
        <div class="template switches__radiogroup">
          <input class="template switches__input switches__input--yes" name="switch-2" id="switch-2-yes" type="radio" >
          <label class="template switches__radio-label switches__radio-label--yes" for="switch-2-yes">Yes</label>
          <input class="template switches__input switches__input--no" name="switch-2" id="switch-2-no" type="radio" >
          <label class="template switches__radio-label switches__radio-label--no" for="switch-2-no">No</label>
          <div class="template switches__radiogroup-bg"></div>
        </div>
      </li>
      
      <li class="template switches__list-item">
        <span class="template switches__group-label">Speech impairment</span>
        <div class="template switches__radiogroup">
          <input class="template switches__input switches__input--yes" name="switch-3" id="switch-3-yes" type="radio" >
          <label class="template switches__radio-label switches__radio-label--yes" for="switch-3-yes">Yes</label>
          <input class="template switches__input switches__input--no" name="switch-3" id="switch-3-no" type="radio" >
          <label class="template switches__radio-label switches__radio-label--no" for="switch-3-no">No</label>
          <div class="template switches__radiogroup-bg"></div>
        </div>
      </li>
      
    </ul>
    <ul class="template outcomes__list">
  <h1 class="template outcomes__headline">Results</h1>
  
  <li class="template outcomes__list-item">
  <div class="template outcomes__item--empty outcomes__item">
    Results will appear here when all fields of the algorithm have been filled.
  </div>
</li>
  
</ul>
  </main>

  <script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyLayout = notifyReactNative.bind(null, 'layout');
  const notifySwitchChanged = notifyReactNative.bind(null, 'switchchanged');
  const notifyError = notifyReactNative.bind(null, 'error');
  const notifyNextPressed = notifyReactNative.bind(null, 'nextpressed');
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed');

  ; // Report window height
  (function() {
    const notify = () => notifyLayout({
      width: document.body.offsetWidth,
      height: document.body.offsetHeight,
    });

    // Watch for opening of outcome dropdowns
    const bodyEl = document.querySelector('body')
    const observerCb = (mutationList) => {
      mutationList.forEach(mut => {
        if (mut.type !== 'attributes') return;
        if (mut.attributeName === 'open') notify();
      })
    }
    const observer = new MutationObserver(observerCb)
    observer.observe(bodyEl, {
      attributes: true,
      childList: true,
      subtree: true
    })

    // Wait for any images to finish loading
    window.onload = notify
    notify()
  })();

  ; // Listen to changes in switch values
  (function() {
    const inputs = Array.from(document.querySelectorAll('.template.switches__input'));
    for (const input of inputs) {
      input.addEventListener('change', ({
        target
      }) => {
        const id = target.id.replace('switch-', '').replace(/(-yes|-no)/, '');
        const active = !!target.id.match('yes');
        notifySwitchChanged({
          id,
          active,
        });
      });
    }
  })();

  ; // Listen to click of next algorithm button
  (function() {
    const buttons = Array.from(document.querySelectorAll('.template.outcomes__button'));
    for (const button of buttons) {
      button.addEventListener('click', ({
        target
      }) => {
        const id = target.getAttribute('data-next-id');
        notifyNextPressed({
          id
        });
      });
    }
  })();

  ; // Listen to click of any link
  (function() {
    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      a.addEventListener('click', (e) => {
        e.preventDefault()
        const href = e.target.getAttribute('href')
        notifyLinkPressed({
          href
        })
      })
    }
  })();

  ; // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.name,
        message: e.message,
      })
    );
  })();
</script>
</body>

</html>"
`;

exports[`EjsAlgorithmRenderer Behavior should render text algorithm 1`] = `
"<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
  body {
    margin: 0 16px;
    padding: 0;
  }

  .template {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  .template.switches__list,
  .template.outcomes__list {
    list-style: none;
    padding: 0;
  }

  .template.header__title {
    margin: 0;
    /* headline-medium */
    line-height: 36px;
    font-size: 28px;
    font-weight: 400;
  }

  .template.body__paragraph {
    margin-top: 16px;
    /* body-medium */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.25px;
    font-weight: 400;
  }

  .template.switches__list {
    margin-top: 16px;
  }

  .template.switches__list-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-top: 8px;
    user-select: none;
  }

  .template.switches__list-item:first-child {
    padding-top: 0;
  }

  .template.switches__input {
    height: 0px;
    width: 0px;
    visibility: hidden;
  }

  .template.switches__group-label,
  .template.switches__radio-label {
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1px;
    font-weight: 500;
  }

  .template.switches__radiogroup {
    position: relative;
    padding: 4px 8px 4px 8px;
    border-radius: 999px;
    border: 1px solid black;
    overflow: hidden;
  }

  .template.switches__radio-label {
    display: inline-block;
    width: 2em;
    text-align: center;
  }

  .template.switches__radiogroup-bg {
    background-color: black;
    position: absolute;
    top: 0;
    width: 50%;
    height: 100%;
    z-index: -1;
    display: none;
  }

  .template.switches__input:checked+.template.switches__radio-label {
    color: white;
  }

  .template.switches__input--yes:checked~.template.switches__radiogroup-bg {
    display: block;
    left: 0;
  }

  .template.switches__input--no:checked~.template.switches__radiogroup-bg {
    display: block;
    right: 0;
  }

  .template.outcomes__list {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .template.outcomes__headline {
    margin: 0;
    margin-top: 16px;
    /* headline-small */
    line-height: 32px;
    font-size: 24px;
    font-weight: 400;
  }

  .template.outcomes__list-item {
    margin-top: 8px;
  }

  .template.outcomes__title {
    /* title-medium */
    line-height: 24px;
    font-size: 16px;
    letter-spacing: 0.15px;
    font-weight: 500;
  }

  .template.outcomes__item {
    padding: 16px;
    border: 1px solid black;
    border-radius: 20px;
    background-color: black;
  }

  .template.outcomes__item>summary {
    list-style: none;
  }

  .template.outcomes__item[open] {
    background-color: white;
  }

  .template.outcomes__item .template.outcomes__title {
    color: white;
  }

  .template.outcomes__item[open] .template.outcomes__title {
    color: black;
  }

  .template.outcomes__item--empty {
    background-color: inherit;
    border-style: dashed;
  }

  .template.outcomes__body {
    margin-top: 16px;
  }

  .template.outcomes__button {
    background-color: black;
    color: white;
    border-radius: 999px;
    height: 40px;
    padding: 0 24px;
    margin-top: 16px;
    /* label-large */
    line-height: 20px;
    font-size: 14px;
    letter-spacing: 0.1px;
    font-weight: 500;
  }
</style>
</head>

<body>
  <header>
    <h1 class="template header__title">ABCTs</h1>
  </header>
  <main>
    <p class="template body__paragraph">
      <img src="https://placeimg.com/640/480/any" height="100"><ul><li>airway</li><li>breathing</li><li>circulation</li><li>time of stroke onset</li><a href="google.com">google</a></ul>
    </p>
    <ul class="template outcomes__list">
  <h1 class="template outcomes__headline">Results</h1>
  
  
  <li class="template outcomes__list-item">
    <details class="template outcomes__item" >
      <summary><span class="template outcomes__title">Stable<span></summary>
      <div class="template outcomes__body">Proceed to GWNS algorithm</div>
      
      <button class="template outcomes__button" data-next-id="1">
        Continue
      </button>
      
    </details>
  </li>
  
  <li class="template outcomes__list-item">
    <details class="template outcomes__item" >
      <summary><span class="template outcomes__title">Not Stable<span></summary>
      <div class="template outcomes__body">Stabilize ABCTs before continuing!</div>
      
    </details>
  </li>
  
  
</ul>
  </main>

  <script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyLayout = notifyReactNative.bind(null, 'layout');
  const notifySwitchChanged = notifyReactNative.bind(null, 'switchchanged');
  const notifyError = notifyReactNative.bind(null, 'error');
  const notifyNextPressed = notifyReactNative.bind(null, 'nextpressed');
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed');

  ; // Report window height
  (function() {
    const notify = () => notifyLayout({
      width: document.body.offsetWidth,
      height: document.body.offsetHeight,
    });

    // Watch for opening of outcome dropdowns
    const bodyEl = document.querySelector('body')
    const observerCb = (mutationList) => {
      mutationList.forEach(mut => {
        if (mut.type !== 'attributes') return;
        if (mut.attributeName === 'open') notify();
      })
    }
    const observer = new MutationObserver(observerCb)
    observer.observe(bodyEl, {
      attributes: true,
      childList: true,
      subtree: true
    })

    // Wait for any images to finish loading
    window.onload = notify
    notify()
  })();

  ; // Listen to changes in switch values
  (function() {
    const inputs = Array.from(document.querySelectorAll('.template.switches__input'));
    for (const input of inputs) {
      input.addEventListener('change', ({
        target
      }) => {
        const id = target.id.replace('switch-', '').replace(/(-yes|-no)/, '');
        const active = !!target.id.match('yes');
        notifySwitchChanged({
          id,
          active,
        });
      });
    }
  })();

  ; // Listen to click of next algorithm button
  (function() {
    const buttons = Array.from(document.querySelectorAll('.template.outcomes__button'));
    for (const button of buttons) {
      button.addEventListener('click', ({
        target
      }) => {
        const id = target.getAttribute('data-next-id');
        notifyNextPressed({
          id
        });
      });
    }
  })();

  ; // Listen to click of any link
  (function() {
    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      a.addEventListener('click', (e) => {
        e.preventDefault()
        const href = e.target.getAttribute('href')
        notifyLinkPressed({
          href
        })
      })
    }
  })();

  ; // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.name,
        message: e.message,
      })
    );
  })();
</script>
</body>

</html>"
`;
