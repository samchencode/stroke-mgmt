<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= algorithm.getTitle() %></title>
  <style>
    body {
      margin: 0;
      padding: 0;
    }

    .template {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    .template.switches__list,
    .template.outcomes__list {
      list-style: none;
      padding: 0;
    }

    .template.header__title {
      margin: 0;
      /* headline-medium */
      line-height: 36px;
      font-size: 28px;
      font-weight: 400;
    }

    .template.body__paragraph {
      margin-top: 16px;
      /* body-medium */
      line-height: 20px;
      font-size: 14px;
      letter-spacing: 0.25px;
      font-weight: 400;
    }

    .template.switches__list {
      margin-top: 16px;
    }

    .template.switches__list-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding-top: 8px;
      user-select: none;
    }

    .template.switches__list-item:first-child {
      padding-top: 0;
    }

    .template.switches__input {
      height: 0px;
      width: 0px;
      visibility: hidden;
    }

    .template.switches__group-label,
    .template.switches__radio-label {
      /* label-large */
      line-height: 20px;
      font-size: 14px;
      letter-spacing: 0.1px;
      font-weight: 500;
    }

    .template.switches__radiogroup {
      position: relative;
      padding: 4px 8px 4px 8px;
      border-radius: 999px;
      outline: 1px solid black;
      overflow: hidden;
    }

    .template.switches__radio-label {
      display: inline-block;
      width: 2em;
      text-align: center;
    }

    .template.switches__radiogroup-bg {
      background-color: black;
      position: absolute;
      top: 0;
      width: 50%;
      height: 100%;
      z-index: -1;
      display: none;
    }

    .template.switches__input:checked+.template.switches__radio-label {
      color: white;
    }

    .template.switches__input--yes:checked~.template.switches__radiogroup-bg {
      display: block;
      left: 0;
    }

    .template.switches__input--no:checked~.template.switches__radiogroup-bg {
      display: block;
      right: 0;
    }

    .template.outcomes__list-item {
      margin-top: 8px;
    }

    .template.outcomes__list-item:first-child {
      margin-top: 8px;
    }

    .template.outcomes__list {
      display: flex;
      flex-wrap: wrap;
      flex-direction: row;
      align-items: center;
    }

    .template.outcomes__title {
      margin-right: 16px;
      /* title-medium */
      line-height: 24px;
      font-size: 16px;
      letter-spacing: 0.15px;
      font-weight: 500;
    }

    .template.outcomes__list-item {
      margin-right: 8px;
    }

    .template.outcomes__list-item:first-child {
      margin-right: 0px;
    }

    .template.outcomes__button {
      background-color: black;
      color: white;
      border-radius: 999px;
      height: 40px;
      padding: 0 24px;
      /* label-large */
      line-height: 20px;
      font-size: 14px;
      letter-spacing: 0.1px;
      font-weight: 500;
    }
  </style>
</head>

<body>
  <header>
    <h1 class="template header__title"><%- algorithm.getTitle() _%></h1>
  </header>
  <main>
    <p class="template body__paragraph">
      <%- algorithm.getBody() %>
    </p>
    <hr>
    <% if(algorithm.hasOutcomes()) { %>
    <ul class="template outcomes__list">
      <h1 class="template outcomes__title">Select Result</h1>
      <% for(const outcome of algorithm.getOutcomes()) { %>
      <li class="template outcomes__list-item">
        <!-- TODO: outcomes must have ids -->
        <button class="template outcomes__button" data-outcome-title="<%- outcome.getTitle() %>"><%- outcome.getTitle() %></button>
      </li>
      <% } %>
    </ul>
    <% } %>
  </main>

  <script>
    function notifyReactNative(messageType, content) {
      const message = {
        type: messageType,
        content
      }
      window.ReactNativeWebView.postMessage(JSON.stringify(message))
    }
    const notifyLayout = notifyReactNative.bind(null, 'layout');
    const notifySwitchChanged = notifyReactNative.bind(null, 'switchchanged');
    const notifyError = notifyReactNative.bind(null, 'error');
    const notifyOutcomeSelected = notifyReactNative.bind(null, 'outcomeselected');


    ; // Report window height
    (function() {
      const dims = {
        width: document.body.offsetWidth,
        height: document.body.offsetHeight,
      }
      notifyLayout(dims)
    })();

    ; // Listen to changes in switch values
    (function() {
      const inputs = Array.from(document.querySelectorAll('.switches__input'))
      for (const input of inputs) {
        input.addEventListener('change', ({
          target
        }) => {
          const id = target.id.replace('switch-', '').replace(/(-yes|-no)/, '')
          const active = !!target.id.match('yes')
          notifySwitchChanged({
            id,
            active
          })
        })
      }
    })();

    ; // Listen to click of outcome button
    (function() {
      const buttons = Array.from(document.querySelectorAll('.outcomes__button'))
      for (const button of buttons) {
        button.addEventListener('click', ({
          target
        }) => {
          const title = target.getAttribute('data-outcome-title')
          notifyOutcomeSelected({
            title
          })
        })
      }
    })();

    ; // Report errors
    (function() {
      window.addEventListener('error', (e) =>
        notifyError({
          message: e.message
        })
      )
    })();
  </script>
</body>

</html>