<script>
  function notifyReactNative(messageType, content) {
    const message = {
      type: messageType,
      content,
    };
    window.ReactNativeWebView.postMessage(JSON.stringify(message));
  }
  const notifyLayout = notifyReactNative.bind(null, 'layout');
  const notifySwitchChanged = notifyReactNative.bind(null, 'switchchanged');
  const notifyError = notifyReactNative.bind(null, 'error');
  const notifyNextPressed = notifyReactNative.bind(null, 'nextpressed');
  const notifyLinkPressed = notifyReactNative.bind(null, 'linkpressed');

  // Report window height
  (function() {
    const notify = () => notifyLayout({
      width: document.body.offsetWidth,
      height: document.body.offsetHeight,
    });

    // Watch for opening of outcome dropdowns
    const bodyEl = document.querySelector('body')
    const observerCb = (mutationList) => {
      mutationList.forEach(mut => {
        if (mut.type !== 'attributes') return;
        if (mut.attributeName === 'open') notify();
      })
    }
    const observer = new MutationObserver(observerCb)
    observer.observe(bodyEl, {
      attributes: true,
      childList: true,
      subtree: true
    })

    // Wait for any images to finish loading
    window.onload = notify
    notify()
  })();

  // Listen to changes in switch values
  (function() {
    const inputs = Array.from(document.querySelectorAll('.template.switches__input'));
    for (const input of inputs) {
      input.addEventListener('change', ({
        target
      }) => {
        const id = target.id.replace('switch-', '').replace(/(-yes|-no)/, '');
        const active = !!target.id.match('yes');
        notifySwitchChanged({
          id,
          active,
        });
      });
    }
  })();

  // Listen to click of next algorithm button
  (function() {
    const buttons = Array.from(document.querySelectorAll('.template.outcomes__button'));
    for (const button of buttons) {
      button.addEventListener('click', ({
        target
      }) => {
        const id = target.getAttribute('data-next-id');
        notifyNextPressed({
          id
        });
      });
    }
  })();

  // Listen to click of any link
  (function() {
    const links = Array.from(document.querySelectorAll('a[href]'))
    for (const a of links) {
      a.addEventListener('click', (e) => {
        e.preventDefault()
        const href = e.target.getAttribute('href')
        notifyLinkPressed({
          href
        })
      })
    }
  })();

  // Report errors
  (function() {
    window.addEventListener('error', (e) =>
      notifyError({
        name: e.name,
        message: e.message,
      })
    );
  })();
</script>